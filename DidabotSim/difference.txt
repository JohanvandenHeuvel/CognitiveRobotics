20,31d19
< 
< 
< //Hardcoding this shit
< Boxes = []
< averageHeapSize = [];
< percentageInAHeap = [];
< amountOfHeaps = [];
< groupDistribution = [];
< boxesMoved = [];
< lastPositions = [];
< //fs = null;
< 
33,34d20
< const sensorlength = 30;
< 
40,77c26,44
<        // def 90 degrees right sensor
<        {sense: senseDistance,  // function handle, determines type of sensor
<            minVal: 0,  // minimum detectable distance, in pixels
<            maxVal: sensorlength,  // maximum detectable distance, in pixels
<            attachAngle: Math.PI/2,  // where the sensor is mounted on robot body
<            lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<            id: 'distR4',  // a unique, arbitrary ID of the sensor, for printing/debugging
<            parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<            value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<        },
<        // define 45 degrees right sensor
<        {sense: senseDistance,  // function handle, determines type of sensor
<            minVal: 0,  // minimum detectable distance, in pixels
<            maxVal: sensorlength,  // maximum detectable distance, in pixels
<            attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
<            lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<            id: 'distR3',  // a unique, arbitrary ID of the sensor, for printing/debugging
<            parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<            value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<        },
<        // def 45 degrees left sensor
<        {sense: senseDistance,
<            minVal: 0,
<            maxVal: sensorlength,
<            attachAngle: -Math.PI/4,
<            lookAngle: 0,
<            id: 'distR1',
<            parent: null,
<            value: null},
<        // def 90 degrees left sensor
<        {sense: senseDistance,
<            minVal: 0,
<            maxVal: sensorlength,
<            attachAngle: -Math.PI/2,
<            lookAngle: 0,
<            id: 'distR0',
<            parent: null,
<            value: null}
---
>      // define right sensor
>      {sense: senseDistance,  // function handle, determines type of sensor
>       minVal: 0,  // minimum detectable distance, in pixels
>       maxVal: 50,  // maximum detectable distance, in pixels
>       attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
>       lookAngle: 0,  // direction the sensor is looking (relative to center-out)
>       id: 'distR',  // a unique, arbitrary ID of the sensor, for printing/debugging
>       parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
>       value: null  // sensor value, i.e. distance in pixels; updated by sense() function
>      },
>      // define left sensor
>      {sense: senseDistance,
>       minVal: 0,
>       maxVal: 50,
>       attachAngle: -Math.PI/4,
>       lookAngle: 0,
>       id: 'distL',
>       parent: null,
>       value: null}
79,253c46
<   },
<     {body: null,  // for MatterJS body, added by InstantiateRobot()
<         color: "blue",  // color of the robot marker
<         init: {x: 50, y: 400, angle: 0},  // initial position and orientation
<         sensors: [  // define an array of sensors on the robot
<             // def 90 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/2,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR4',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // define 45 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR3',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // def 45 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/4,
<                 lookAngle: 0,
<                 id: 'distR1',
<                 parent: null,
<                 value: null},
<             // def 90 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/2,
<                 lookAngle: 0,
<                 id: 'distR0',
<                 parent: null,
<                 value: null}
<         ]
<     },
<     {body: null,  // for MatterJS body, added by InstantiateRobot()
<         color: "green",  // color of the robot marker
<         init: {x: 400, y: 400, angle: 0},  // initial position and orientation
<         sensors: [  // define an array of sensors on the robot
<             // def 90 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/2,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR4',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // define 45 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR3',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // def 45 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/4,
<                 lookAngle: 0,
<                 id: 'distR1',
<                 parent: null,
<                 value: null},
<             // def 90 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/2,
<                 lookAngle: 0,
<                 id: 'distR0',
<                 parent: null,
<                 value: null}
<         ]
<     }, {body: null,  // for MatterJS body, added by InstantiateRobot()
<         color: "yellow",  // color of the robot marker
<         init: {x: 400, y: 50, angle: 0},  // initial position and orientation
<         sensors: [  // define an array of sensors on the robot
<             // def 90 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/2,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR4',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // define 45 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR3',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // def 45 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/4,
<                 lookAngle: 0,
<                 id: 'distR1',
<                 parent: null,
<                 value: null},
<             // def 90 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/2,
<                 lookAngle: 0,
<                 id: 'distR0',
<                 parent: null,
<                 value: null}
<         ]
<     }, {body: null,  // for MatterJS body, added by InstantiateRobot()
<         color: "purple",  // color of the robot marker
<         init: {x: 50, y: 200, angle: 0},  // initial position and orientation
<         sensors: [  // define an array of sensors on the robot
<             // def 90 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/2,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR4',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // define 45 degrees right sensor
<             {sense: senseDistance,  // function handle, determines type of sensor
<                 minVal: 0,  // minimum detectable distance, in pixels
<                 maxVal: sensorlength,  // maximum detectable distance, in pixels
<                 attachAngle: Math.PI/4,  // where the sensor is mounted on robot body
<                 lookAngle: 0,  // direction the sensor is looking (relative to center-out)
<                 id: 'distR3',  // a unique, arbitrary ID of the sensor, for printing/debugging
<                 parent: null,  // robot object the sensor is attached to, added by InstantiateRobot
<                 value: null  // sensor value, i.e. distance in pixels; updated by sense() function
<             },
<             // def 45 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/4,
<                 lookAngle: 0,
<                 id: 'distR1',
<                 parent: null,
<                 value: null},
<             // def 90 degrees left sensor
<             {sense: senseDistance,
<                 minVal: 0,
<                 maxVal: sensorlength,
<                 attachAngle: -Math.PI/2,
<                 lookAngle: 0,
<                 id: 'distR0',
<                 parent: null,
<                 value: null}
<         ]
<     }
---
>   }
259,262c52,55
<   boxFric: 0.005,
<   boxMass: 1,  // mass of boxes
<   boxSize: 18,  // size of the boxes, in pixels
<   robotSize: 14,//2*7,  // robot radius, in pixels
---
>   boxFric: 0.005, //
>   boxMass: 0.01,  // mass of boxes
>   boxSize: 20,  // size of the boxes, in pixels
>   robotSize: 2*7,  // robot radius, in pixels
269,270c62,63
<   debugSensors: true,  // plot sensor rays and mark detected objects
<   debugMouse: true,  // allow dragging any object with the mouse
---
>   debugSensors: false,  // plot sensor rays and mark detected objects
>   debugMouse: false,  // allow dragging any object with the mouse
310,311c103
<       //change the 3 to 4 or alot(circle)
<     return Matter.Bodies.polygon(350*Math.random() + 25, 350*Math.random() + 25, 4, simInfo.boxSize,
---
>     return Matter.Bodies.rectangle(x, y, simInfo.boxSize, simInfo.boxSize,
318c110
<         nBoxX = 3, nBoxY = 4,
---
>         nBoxX = 5, nBoxY = 5,
323,324d114
< 
<   boxes = stack.bodies;
340c130
<   simInfo.runner = Matter.Runner.create({fps: 120,  // TODO: why weird effects?
---
>   simInfo.runner = Matter.Runner.create({fps: 60,  // TODO: why weird effects?
352c142
< function rotate(robot, torque = 0) {
---
> function rotate(robot, torque=0) {
391,393d180
<   bodies = bodies.filter(function(x){return !(x.label==='point')});
<   //console.log(bodies.filter(function(x){return (x.label==='point')}));
<   //console.log(bodies[0].label=='point');
606,649d392
<   robotUpdateSensors(robot)
<   rightSens = robot.sensors[0];
<   leftSens = robot.sensors[1];
<   farRightSens = robot.sensors[2];
<   farLeftSens = robot.sensors[3];
< 
< 
< 
<     /*
<     distR4 farRight [0]
<     distR3 right [1]
<     distR0 farLeft [2]
<     distR1 left [3]
<      */
< 
<     const angle = 0.005;
<     const forward = 0.0004;
< 
<     left90 = robot.sensors[3].value == Infinity ? robot.sensors[3].maxVal : robot.sensors[3].value;
<     left = robot.sensors[2].value == Infinity ? robot.sensors[2].maxVal : robot.sensors[2].value;
<     right = robot.sensors[1].value == Infinity ? robot.sensors[1].maxVal :  robot.sensors[1].value;
<     right90 = robot.sensors[0].value == Infinity ? robot.sensors[0].maxVal :  robot.sensors[0].value;
< 
<     leftTotal = (left + 0.3 * Math.random() - 0.3 * Math.random()) + (left90 + 0.3 * Math.random() - 0.3 * Math.random());
<     rightTotal = (right + 0.3 * Math.random() - 0.3 * Math.random()) + (right90 + 0.3 * Math.random() - 0.3 * Math.random());
<     leftAngle = leftTotal * angle;
<     rightAngle = rightTotal * angle;
< 
<     drive(robot, forward);
<     direction = 0 - leftAngle + rightAngle; //rotates faster when far away    
<     rotate(robot, direction);
< 
< 
<     // if(leftforce - rightforce < 5 && leftforce - rightforce > 0 && front < 5)
<     // {
<     //   rotate(robot, 3*angle);
<     //   drive(robot, -1*forward);
<     // }
<     // else
<     // {
<     //   rotate(robot, direction);
<     //   drive(robot, forward);
<     // }
< 
773c516
<    // count and display number of steps
---
>     // count and display number of steps
781,784d523
<       for (var i = 0; i < averageHeapSize.length;i++)
<       {
<           console.log(averageHeapSize[i].toString(), amountOfHeaps[i].toString(), percentageInAHeap[i].toString(), boxesMoved[i].toString())
<       }
787,840d525
< 
<     log = function() {
<         var context = "My Descriptive Logger Prefix:";
<         return Function.prototype.bind.call(console.log, console, context);
<     }();
< 
<   if (simInfo.curSteps%250 == 0){
<     updateStatistics();
<   }
< 
<     /*if (simInfo.curSteps%5 == 0){
<     Matter.World.add(simInfo.world, [Matter.Bodies.rectangleCollisionless(robots[0].x+simInfo.robotSize/2, robots[0].y+simInfo.robotSize/2, 1, 1,//x, y, simInfo.boxSize, simInfo.boxSize,
<         {frictionAir: simInfo.airDrag,
<             friction: simInfo.boxFric,
<             mass: simInfo.boxMass,
<             role: 'point'})]);};*/
< }
< 
< function updateStatistics() {
<     positions = boxes.map(function(x){return x.position});
<     if (lastPositions.length == 0){
<         lastPositions = positions.map(a => Object.assign({}, a));
< 	}
< 
<     positionsNotAtEdge = positions.filter(function(pos)
<     {return (pos.x > simInfo.robotSize + 5)&&
<     (pos.x < simInfo.width - (simInfo.boxSize + 5))&&
<         (pos.y > simInfo.robotSize + 5)&&
<         (pos.y < simInfo.height - (simInfo.boxSize + 5))});
< 
< 
<     groups = calculateGroups(positionsNotAtEdge);
<     amountOfBoxesMoved = 0;
<     for (var i = 0; i < positions.length; i++){
<         if (lastPositions[i].x != positions[i].x || lastPositions[i].y != positions[i].y){
<             amountOfBoxesMoved++;
<         }
<     }
<     boxesMoved.push(amountOfBoxesMoved);
< 
<     heaps = groups.filter(function(x){return x.length>2});
< 
<     percentageInAHeap.push(flatten(heaps).length / positions.length);
<     amountOfHeaps.push(heaps.length);
<     averageHeapSize.push(averLength(heaps));
< 
<     groupSizes = groups.map(function(x){return x.length});
<     distribution = []
<     for (var i = 1; i <= positions.length; i++){
<         distribution.push((groupSizes.filter(function(x){return x == i}).length*i) / positions.length)
<     }
<     distribution[0] += (positions.length - positionsNotAtEdge.length)/ positions.length
<     groupDistribution.push(distribution)
<     lastPositions = positions.map(a => Object.assign({}, a));
896,905c581
<     if(averageHeapSize.length!=0) {
<         document.getElementById('SensorLabel').innerHTML = sensorString
<             + "<br>averageHeapSize = " + averageHeapSize.slice(-1).pop().toString()
<             + "<br>percentageInAHeap = " + percentageInAHeap.slice(-1).pop().toString()
<             + "<br>amountOfHeaps = " + amountOfHeaps.slice(-1).pop().toString()
<             + "<br>groupDistribution = " + groupDistribution.slice(-1).pop().toString();
<         //+ "<br>Amount of heaps: " + heaps.toString()
<         //+ "<br>Amount of multiple-element heaps: " + (heaps - oneElementHeap).toString()
<         //+ "<br>Average heap size: " + averSize.toString();
<     }
---
>     document.getElementById('SensorLabel').innerHTML = sensorString;
963,1033d638
< }
< 
< function calculateGroups(positions, currentPos = null) {
<   clusters = [];
<   positionsLeft = Array.from(positions); //The array that contains the positions that haven't been assigned to a cluster yet
< 
<   while(positionsLeft.length != 0){
<     thisCluster = [positionsLeft[0]];
<     for (k=0;k<thisCluster.length;k++){
<         closePositions = positionsLeft.filter(function(x){return (cartesianDis(x,thisCluster[k])< 40)});
<         thisCluster = thisCluster.concat(closePositions);
<         thisCluster = uniq(thisCluster);
<     }
<     clusters.push(thisCluster);
<     positionsLeft = diff(positionsLeft,thisCluster);
<   }
<   return clusters;
< }
< 
< /**
<  * Removes all duplicate elements in an array
<  */
< function uniq(arr){
<   return Array.from(new Set(arr));
< }
< 
< /**
<  * Computes the difference/complement between 2 arrays
<  */
< function diff(a1,a2){
<     var result = [];
<     for (var i = 0; i < a1.length; i++) {
<         if (a2.indexOf(a1[i]) === -1) {
<             result.push(a1[i]);
<         }
<     }
<     for (i = 0; i < a2.length; i++) {
<         if (a1.indexOf(a2[i]) === -1) {
<             result.push(a2[i]);
<         }
<     }
<     return Array.from(result);
< }
< 
< function cartesianDis(posA,posB){
<   return Math.sqrt( Math.pow(posA.x-posB.x,2) + Math.pow(posA.y-posB.y,2))
< }
< 
< function sum(array){
<   total = 0
<   for (i in array){
<     total += array[i]
<   }
<   return total
< }
< 
< /**
<  * Computes the average length of the nested arrays in an array
<  */
< function averLength(array){
<     total = 0
<     for (i in array){
<         total += array[i].length
<     }
<     return total/array.length
< }
< 
< function flatten(arr) {
<     return arr.reduce(function (flat, toFlatten) {
<         return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);
<     }, []);
